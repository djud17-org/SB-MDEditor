//
//  MainViewController.swift
//  SB-MDEditor
//
//  Created by SERGEY SHLYAKHIN on 18.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: AnyObject {
	func displaySomething(viewModel: Main.Something.ViewModel)
}

final class MainViewController: UIViewController, MainDisplayLogic {
	var interactor: MainBusinessLogic?
	var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
	var storage: IFilesStorageProvider

	private lazy var errorView = ErrorView()

	init(
		interactor: MainBusinessLogic,
		router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing),
		dep: IMainModuleDepencency
	) {
		self.interactor = interactor
		self.router = router
		self.storage = dep.storage
		super.init(nibName: nil, bundle: nil)
	}

	required init?(coder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}

	// MARK: View lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()

		setup()
		applyStyle()
		setupConstraints()

		doSomething()
	}

	// MARK: Do something
	func doSomething() {
		let request = Main.Something.Request()
		interactor?.doSomething(request: request)

		print(storage.bandlePath)
		print(storage.aboutPath)

		print("================")

		storage.add(fileName: "FileName")
		storage.add(fileName: "FileName2")
		storage.add(fileName: "FileName")
		storage.add(fileName: "FileName3")
		storage.add(fileName: "FileName")
		storage.add(fileName: "FileName4")
		storage.add(fileName: "FileName")
		storage.add(fileName: "FileName5")
		storage.add(fileName: "FileName")
		storage.add(fileName: "FileName6")
		print(storage.getRecentFiles())

		print("================")

		storage.currentPath = "123/456"
		print(storage.currentPath ?? "–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

		storage.removeCurrentPath()
		print(storage.currentPath ?? "–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
	}

	func displaySomething(viewModel: Main.Something.ViewModel) {}
}

// MARK: - UI
private extension MainViewController {
	func setup() {
		let testMessage = ErrorInputData(
			emoji: "üôà",
			message: "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É: –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
		) { [weak self] in
			self?.router?.navigate(.toAbout)
		}
		errorView.update(with: testMessage)
		errorView.show()
	}
	func applyStyle() {
		title = Appearance.title
		view.backgroundColor = Theme.color(usage: .background)
	}
	func setupConstraints() {
		[
			errorView
		].forEach { item in
			item.translatesAutoresizingMaskIntoConstraints = false
			view.addSubview(item)
		}

		errorView.makeEqualToSuperview()
	}
}

// MARK: - Appearance
private extension MainViewController {
	enum Appearance {
		static let title = "MD Editor"
	}
}

#if canImport(SwiftUI) && DEBUG
import SwiftUI
struct ViewProvider3: PreviewProvider {
	static var previews: some View {
		let rootViewController = RootViewController()
		let di = Di(rootVC: rootViewController)
		rootViewController.factory = di
		// swiftlint:disable:next force_unwrapping
		let viewController = rootViewController.factory!.makeMainModule().viewController
		return viewController.preview()
	}
}
#endif
